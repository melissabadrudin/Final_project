melissa.badrudin DAFT June 2020  12h25
###### Import my csv file with the dataset
import pandas as pd
df = pd.read_csv(‘/Users/melissabadrudin/Documents/GitHub/Final_project/stand_df.csv’)
###### Pass the dataset to mySQL
conda install pymysql
#import the module
from sqlalchemy import create_engine
# create sqlalchemy engine
engine =create_engine(“mysql+pymysql://{user}:{pw}@localhost/{db}”
                       .format(user=“root”,
                               pw=“insert_password”,
                               db=“stand_virtual”))
# pass the data in one line code to sql:
df.to_sql(‘dataset’, con = engine, if_exists = “append”)
print(“Done”)
#it worked!

Rafael Barbosa Bandeira de Mello  17h40
# Random forest
from sklearn.ensemble import RandomForestClassifier
#from sklearn.linear_model import ridge_regression
# create an instance of the model
forest = RandomForestClassifier()
# fit the model
forest.fit(X_train, y_train)
# predict for test
y_pred = forest.predict(X_test)
# compare predictions to actual answers
print('Confusion matrix')
print(confusion_matrix(y_pred,y_test)) # got an error
print('-------------------------------------------------------')
# accuracy_score
# fitted X_test data vs. y_test data (actual answer)
print('Accuracy score')
print(forest.score(X_test,y_test))
#print(accuracy_score(y_pred,y_test)) does the exact same thing as forest.score(X_test,y_test)
#forest.score(X_test,y_test)
print('-------------------------------------------------------')
# classification report
print('Classification report')
print(classification_report(y_pred,y_test))
17h41
from xgboost import XGBClassifier
# initialize the model
model = XGBClassifier()
# fit the model
model.fit(X_train, y_train)
#predictions: test data
y_pred = model.predict(X_test)
# compare predictions to actual answers
print('Confusion matrix')
print(confusion_matrix(y_pred,y_test))
print('-------------------------------------------------------')
# accuracy_score
# fitted X_test data vs. y_test data (actual answer)
print('Accuracy score')
print(accuracy_score(y_pred,y_test))
print('-------------------------------------------------------')
# classification report
print('Classification report')
print(classification_report(y_pred,y_test))

Rafael Barbosa Bandeira de Mello  17h48
#lets try hyperparameters
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import RandomizedSearchCV
# Number of trees in random forest
n_estimators = [100,500,1000,1500]
# Number of features to consider at every split
max_features = ['auto', 'sqrt']
# Maximum number of levels in each tree
max_depth = [10,15,20,25]
# Create the  grid
grid = {'n_estimators': n_estimators,
               'max_features': max_features,
               'max_depth': max_depth
               }
17h48
# estimator
forest = RandomForestClassifier()
# cv = 3 -> number of cross validation folds
grid_forest = GridSearchCV(estimator = forest, param_grid = grid, cv = 3)
17h48
# Fit the grid search to the data
grid_forest.fit(X_train, y_train)
#
grid_forest.best_params_
17h49
# in the grid search you know for sure, that he tested all the combinations you gave him
grid_forest.score(X_test, y_test)
17h49
grid_forest.score(X_train, y_train)
17h49
#predictions: test data
y_pred = grid_forest.predict(X_test)
probs = grid_forest.predict_proba(X_test)
print(probs)
# compare predictions to actual answers
print('Confusion matrix')
print(confusion_matrix(y_pred,y_test))
print('-------------------------------------------------------')
# accuracy_score
# fitted X_test data vs. y_test data (actual answer)
print('Accuracy score')
print(accuracy_score(y_pred,y_test))
print('-------------------------------------------------------')
# classification report
print('Classification report')
print(classification_report(y_pred,y_test))







Mensagem de Rafael Barbosa Bandeira de Mello


